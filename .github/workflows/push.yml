name: Push Actions (infra deploy, app build & deploy)

on:
  push:
    branches:
    - main
    - beta
  
jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      infra: ${{ steps.filter.outputs.infra }}
      app: ${{ steps.filter.outputs.app }}
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4

    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          infra:
            - 'terraform/**'
          app:
            - 'app/**'
  infra:
    needs: changes
    if: ${{ needs.changes.outputs.infra == 'true'}}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.AWS_DEPLOY_ROLE }}
          role-session-name: github_actions_deploy_infra_weordl
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init -input=false -backend-config=./config/${{ github.ref_name }}.s3.tfbackend

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan -var-file=./config/${{ github.ref_name }}.tfvars -var='source_control=${{ github.repository }}/${{ github.ref_name }}/${{ github.sha }}'
      
      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: ./terraform/tfplan
          retention-days: 1

      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color -input=false tfplan
      
      - name: Set Terraform Outputs
        id: output
        run: |
          echo S3_BUCKET_ID=$(terraform output -raw s3_bucket_id) >> $GITHUB_OUTPUT
          echo CLOUDFRONT_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id) >> $GITHUB_OUTPUT
    outputs: 
      s3_bucket_id: ${{ steps.output.outputs.S3_BUCKET_ID }}
      cloudfront_distribution_id: ${{ steps.output.outputs.CLOUDFRONT_DISTRIBUTION_ID  }}
  app:
    needs: [changes, infra]
    if: ${{ needs.changes.outputs.app == 'true'}}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.AWS_DEPLOY_ROLE }}
          role-session-name: github_actions_deploy_app_weordl
          aws-region: ${{ vars.AWS_REGION }}

      - name: Build
        run: cd app && npm install && npm run build

      - name: Upload App Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: app/build
          retention-days: 1

      - name: Deploy App Build to S3 Bucket
        run: aws s3 sync app/build/ s3://${{ needs.infra.outputs.s3_bucket_id }} --delete

      - name: Invalidate CloudFront
        run: aws cloudfront create-invalidation --distribution-id ${{ needs.infra.outputs.cloudfront_distribution_id }} --paths '/*'